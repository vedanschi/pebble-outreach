# This is an illustrative example of how to integrate the scheduler
# into your main FastAPI application file (e.g., backend/src/main.py).
# You'll need to adapt this to your actual application structure.

from fastapi import FastAPI
# Other necessary imports for your application (routers, etc.)
# from .routers import items, users # Example
# from .database import engine, Base # Example if you create tables here

# Import scheduler functions
from src.core.scheduler import start_scheduler, shutdown_scheduler # Adjust path if needed

# Create FastAPI app instance
app = FastAPI()

# --- Event Handlers for Scheduler ---

@app.on_event("startup")
async def startup_event():
    """
    Actions to perform when the application starts.
    """
    print("MainApp: Application startup...")
    # Initialize database (example, if you have such a function)
    # Base.metadata.create_all(bind=engine) # Example: Create DB tables if they don't exist

    # Start the APScheduler and its jobs
    print("MainApp: Starting scheduler...")
    start_scheduler()
    print("MainApp: Scheduler should be running if configured.")

@app.on_event("shutdown")
async def shutdown_event():
    """
    Actions to perform when the application shuts down.
    """
    print("MainApp: Application shutdown...")

    # Shutdown the APScheduler
    print("MainApp: Shutting down scheduler...")
    shutdown_scheduler()
    print("MainApp: Scheduler shut down.")


# --- Include your API routers ---
# app.include_router(items.router) # Example
# app.include_router(users.router) # Example
# app.include_router(src.campaigns.routes.router, prefix="/api/v1", tags=["Campaigns"]) # Example
# app.include_router(src.followups.routes.router, prefix="/api/v1", tags=["Follow-ups"]) # Example

# --- Root endpoint (optional) ---
@app.get("/")
async def root():
    return {"message": "Welcome to the Sales Automation Platform API"}


# If you are using a different structure, for example, creating the app in a function
# and using lifespan events (recommended for newer FastAPI versions):

# from contextlib import asynccontextmanager

# @asynccontextmanager
# async def lifespan(app: FastAPI):
#     # Startup logic
#     print("MainApp (lifespan): Application startup...")
#     print("MainApp (lifespan): Starting scheduler...")
#     start_scheduler()
#     print("MainApp (lifespan): Scheduler should be running if configured.")
#     yield
#     # Shutdown logic
#     print("MainApp (lifespan): Application shutdown...")
#     print("MainApp (lifespan): Shutting down scheduler...")
#     shutdown_scheduler()
#     print("MainApp (lifespan): Scheduler shut down.")

# app_with_lifespan = FastAPI(lifespan=lifespan)
# # Then include routers on app_with_lifespan
# # app_with_lifespan.include_router(...)


# To run this (example using uvicorn):
# uvicorn main:app --reload
# (assuming this file is named main.py in the directory where you run uvicorn)
```
